version: "3.8"
services:
  zookeeper:
    image: wurstmeister/zookeeper
    deploy:
      resources:
        limits:
          memory: 64G    
  kafka:
    image: wurstmeister/kafka
    ports:
      - "${KAFKA_PORT}:9092"
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      DOCKER_API_VERSION: 1.22
      HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "test_0:1:1:delete,test_1:1:1:delete"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: -1
      KAFKA_LOG_RETENTION_BYTES: -1
      KAFKA_LOG_CLEANER_MIN_COMPACTION_LAG_MS: 1000000000
      KAFKA_LOG_SEGMENT_MS: 10000
      KAFKA_MIN_CLEANABLE_DIRTY_RATIO: 1
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  pathway-all:
    build: ../services/pathway-all/
    deploy:
      resources:
        limits:
          memory: 32G    
  
    cap_add: 
      - SYS_PTRACE
    environment:
      - AUTOCOMMIT_FREQUENCY_MS
      - BENCHMARK_TYPE
      - COMMIT_FREQUENCY
      - RATE_PER_SECOND
      - CORES
      - WORKERS
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - "./results:/pathway-all/results"
  streamer:
    build: ../services/streamer/
    environment:
      - AUTOCOMMIT_FREQUENCY_MS
      - BENCHMARK_TYPE
      - COMMIT_FREQUENCY
      - RATE_PER_SECOND
    depends_on:
      kafka:
        condition: service_healthy
      pathway-all:
        condition: service_started
  
  stats-collector-wordcount:
    build: 
      context: ../services/stats-collector/
      dockerfile: Dockerfile-wordcount
    environment:
      - AUTOCOMMIT_FREQUENCY_MS
      - BENCHMARK_TYPE
      - COMMIT_FREQUENCY
      - ENGINE_TYPE
      - RATE_PER_SECOND
      - CORES
      - WORKERS
      - STATS_SHORT
      - STATS_TIMELINE 
      - STATS_PATHWAY_PTIME_AGGREGATED
    depends_on:
      streamer:
        condition: service_completed_successfully
    volumes:
      - "./results:/stats-collector-wordcount/results"

  stats-collector-increment:
    build: 
      context: ../services/stats-collector/
      dockerfile: Dockerfile-increment
    environment:
      - AUTOCOMMIT_FREQUENCY_MS
      - BENCHMARK_TYPE
      - COMMIT_FREQUENCY
      - ENGINE_TYPE
      - RATE_PER_SECOND
      - CORES
      - WORKERS
      - STATS_SHORT
      - STATS_TIMELINE 
      - STATS_PATHWAY_PTIME_AGGREGATED
    depends_on:
      streamer:
        condition: service_completed_successfully
    volumes:
      - "./results:/stats-collector-increment/results"

  kafka_io_record:
    build: 
      context: ../services/stats-collector/
      dockerfile: Dockerfile-kafka_io_record
    environment:
      - AUTOCOMMIT_FREQUENCY_MS
      - BENCHMARK_TYPE
      - COMMIT_FREQUENCY
      - ENGINE_TYPE
      - RATE_PER_SECOND
      - CORES
      - WORKERS
      - STATS_SHORT
      - STATS_TIMELINE 
      - STATS_PATHWAY_PTIME_AGGREGATED
    depends_on:
      streamer:
        condition: service_completed_successfully
    volumes:
      - "./results:/kafka_io_record/results"

